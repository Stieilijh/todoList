{"version":3,"file":"main.js","mappings":"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","sources":["webpack://todolist/./src/assets/Task.js","webpack://todolist/./src/assets/Project.js","webpack://todolist/./src/assets/UI.js","webpack://todolist/./src/index.js","webpack://todolist/./src/assets/Todolist.js"],"sourcesContent":["export default class Task {\n  constructor(taskName, dueDate = \"No date\") {\n    this.taskName = taskName;\n  }\n  getName() {\n    return this.taskName;\n  }\n  setName(taskName) {\n    this.taskName = taskName;\n  }\n  getDate() {\n    return this.dueDate;\n  }\n  setDate(date) {\n    this.dueDate = date;\n  }\n}\n","import Task from \"./Task\";\n\nexport default class Project {\n  constructor(projectName) {\n    this.tasks = [];\n    this.projectName = projectName;\n    this.tasks.push(new Task(\"Some Task\" + projectName));\n  }\n\n  getName() {\n    return this.projectName;\n  }\n\n  setName(name) {\n    this.projectName = name;\n  }\n  getTasks() {\n    return this.tasks;\n  }\n\n  setTasks(tasks) {\n    this.tasks = tasks;\n  }\n\n  addTask(task) {\n    this.tasks.push(task);\n  }\n  deleteTasks(taskToBeDeleted) {\n    this.tasks.filter((task) => !(task.getName() == taskToBeDeleted.getName()));\n  }\n  has(taskName) {\n    return this.tasks.some((item) => item.getName() == taskName);\n  }\n}\n","import Project from \"./Project\";\nimport Task from \"./Task\";\nimport TodoList from \"./Todolist\";\n\nlet currentProjectName = \"Today\";\n\nexport default function setupNavBar(todoList) {\n  //NavBar Projects menu\n  MakeaddProjectFormInvisible();\n  UpdateProjectNames(todoList);\n\n  MakeaddTaskFormInvisible();\n  UpdateProjectTasks(todoList);\n\n  //cancel new project\n  document.querySelector(\"#cancelNewProject\").addEventListener(\"click\", () => {\n    MakeaddProjectFormInvisible();\n  });\n  //cancel new task\n  document.querySelector(\"#cancelNewTask\").addEventListener(\"click\", () => {\n    MakeaddTaskFormInvisible();\n  });\n\n  //add project button ActionListener\n  document.querySelector(\"#addProjectBtn\").addEventListener(\"click\", () => {\n    addProjectBtn.style.display = \"none\";\n    document.querySelector(\"#addProjectFormDiv\").style.display = \"block\";\n  });\n\n  //add task button ActionListener\n  document.querySelector(\"#addTaskBtn\").addEventListener(\"click\", () => {\n    addTaskBtn.style.display = \"none\";\n    document.querySelector(\"#addTaskFormDiv\").style.display = \"block\";\n  });\n  //addProjectform submit\n  document\n    .querySelector(\"#createNewProjectBtn\")\n    .addEventListener(\"click\", () => {\n      const name = document.querySelector(\"#addProjectNameInput\").value;\n      if (todoList.has(name)) {\n        alert(\"Project already exists\");\n      } else if (name === \"\") {\n        alert(\"Name can't be empty\");\n      } else {\n        MakeaddProjectFormInvisible();\n        todoList.addproject(new Project(name));\n        UpdateProjectNames(todoList);\n      }\n    });\n  //addTaskform submit\n  document.querySelector(\"#createNewTaskBtn\").addEventListener(\"click\", () => {\n    const name = document.querySelector(\"#addTaskNameInput\").value;\n    const date = document.querySelector(\"#addDueDateInput\").value;\n    if (findCurrentProject(todoList).has(name)) {\n      alert(\"Task already exists\");\n    } else if (name === \"\") {\n      alert(\"Task can't be empty\");\n    } else {\n      MakeaddTaskFormInvisible();\n      findCurrentProject(todoList).addTask(new Task(name, date));\n      UpdateProjectTasks(todoList);\n    }\n  });\n}\n\nfunction UpdateProjectNames(todoList) {\n  const projectsDiv = document.querySelector(\"#projects\");\n  projectsDiv.innerHTML = \"\";\n  todoList.getProjects().forEach((element) => {\n    const projectDiv = document.createElement(\"div\");\n    const projectText = document.createElement(\"p\");\n    projectDiv.id = element.getName() + \"div\";\n    projectText.id = element.getName();\n    projectText.textContent = element.getName();\n    projectDiv.appendChild(projectText);\n    projectDiv.classList = \"projectList\";\n    projectsDiv.appendChild(projectDiv);\n    //changing projects\n    projectText.addEventListener(\"click\", () => {\n      currentProjectName = element.getName();\n      UpdateProjectTasks(todoList);\n    });\n    //styling the new project\n    projectDiv.style.display = \"flex\";\n    projectDiv.style.justifyContent = \"space-around\";\n    projectDiv.style.alignItems = \"center\";\n    //delete project btn\n    const delBtn = document.createElement(\"button\");\n    delBtn.id = element.getName() + \"DelBtn\";\n    delBtn.textContent = \"x\";\n    delBtn.classList = \"cancelBtns\";\n    delBtn.addEventListener(\"click\", () => {\n      todoList.deleteproject(element.getName());\n      UpdateProjectNames(todoList);\n    });\n    projectDiv.appendChild(delBtn);\n  });\n}\nfunction MakeaddProjectFormInvisible() {\n  document.querySelector(\"#addProjectBtn\").style.display = \"block\";\n  document.querySelector(\"#addProjectFormDiv\").style.display = \"none\";\n}\n\nfunction UpdateProjectTasks(todoList) {\n  //task text\n  const currentProject = findCurrentProject(todoList);\n  if (!currentProject) {\n    return;\n  }\n  const tasksDiv = document.querySelector(\"#tasks\");\n  tasksDiv.innerHTML = \"\";\n  currentProject.getTasks().forEach((task) => {\n    const taskDiv = document.createElement(\"div\");\n    const taskText = document.createElement(\"p\");\n    taskDiv.id = task.getName().slice(0, 4) + \"div\";\n    taskText.id = task.getName().slice(0, 4);\n    taskText.textContent = task.getName();\n    taskDiv.classList = \"taskList\";\n    tasksDiv.appendChild(taskDiv);\n    taskDiv.appendChild(taskText);\n  });\n}\n\nfunction MakeaddTaskFormInvisible() {\n  document.querySelector(\"#addTaskBtn\").style.display = \"block\";\n  document.querySelector(\"#addTaskFormDiv\").style.display = \"none\";\n}\n\nfunction findCurrentProject(todoList) {\n  if (todoList.isEmpty()) {\n    return false;\n  }\n  return todoList.getProject(currentProjectName);\n}\n","import Task from \"./assets/Task\";\nimport TodoList from \"./assets/Todolist\";\nimport Project from \"./assets/Project\";\nimport setupUI from \"./assets/UI\";\n\nconst todoList = new TodoList();\n\nsetupUI(todoList);\n","import Project from \"./Project\";\n\nexport default class TodoList {\n  constructor() {\n    this.projects = [];\n    this.projects.push(new Project(\"Today\"));\n    this.projects.push(new Project(\"This Week\"));\n  }\n  isEmpty() {\n    return this.projects.length == 0;\n  }\n  getProjects() {\n    return this.projects;\n  }\n  getProject(name) {\n    return this.projects.find((project) => project.getName() == name);\n  }\n\n  setprojects(projects) {\n    this.projects = projects;\n  }\n\n  addproject(project) {\n    if (!this.has(project.getName())) this.projects.push(project);\n  }\n  deleteproject(projectName) {\n    this.projects = this.projects.filter(\n      (project) => !(project.getName() === projectName)\n    );\n  }\n  has(projectName) {\n    return this.projects.some((item) => item.getName() === projectName);\n  }\n}\n"],"names":["Task","constructor","taskName","dueDate","this","getName","setName","getDate","setDate","date","Project","projectName","tasks","push","name","getTasks","setTasks","addTask","task","deleteTasks","taskToBeDeleted","filter","has","some","item","currentProjectName","UpdateProjectNames","todoList","projectsDiv","document","querySelector","innerHTML","getProjects","forEach","element","projectDiv","createElement","projectText","id","textContent","appendChild","classList","addEventListener","UpdateProjectTasks","style","display","justifyContent","alignItems","delBtn","deleteproject","MakeaddProjectFormInvisible","currentProject","findCurrentProject","tasksDiv","taskDiv","taskText","slice","MakeaddTaskFormInvisible","isEmpty","getProject","projects","length","find","project","setprojects","addproject","addProjectBtn","addTaskBtn","value","alert"],"sourceRoot":""}