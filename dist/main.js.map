{"version":3,"file":"main.js","mappings":"mBAAe,MAAMA,EACnBC,YAAYC,EAAUC,EAAU,WAC9BC,KAAKF,SAAWA,EAChBE,KAAKD,QAAUA,EAEjBE,UACE,OAAOD,KAAKF,SAEdI,QAAQJ,GACNE,KAAKF,SAAWA,EAElBK,UACE,OAAQH,KAAKD,QAAsBC,KAAKD,QAAjB,UAEzBK,QAAQC,GACNL,KAAKD,QAAUM,GCbJ,MAAMC,EACnBT,YAAYU,GACVP,KAAKQ,MAAQ,GACbR,KAAKO,YAAcA,EACnBP,KAAKQ,MAAMC,KAAK,IAAIb,EAAK,gBAAkBW,IAG7CN,UACE,OAAOD,KAAKO,YAGdL,QAAQQ,GACNV,KAAKO,YAAcG,EAErBC,WACE,OAAOX,KAAKQ,MAGdI,SAASJ,GACPR,KAAKQ,MAAQA,EAGfK,QAAQC,GACNd,KAAKQ,MAAMC,KAAKK,GAElBC,WAAWC,GACThB,KAAKQ,MAAQR,KAAKQ,MAAMS,QACrBH,KAAWA,EAAKb,WAAae,KAGlCE,IAAIpB,GACF,OAAOE,KAAKQ,MAAMW,MAAMC,GAASA,EAAKnB,WAAaH,KC/BxC,MAAMuB,EACnBxB,cACEG,KAAKsB,SAAW,GAChBtB,KAAKsB,SAASb,KAAK,IAAIH,EAAQ,UAC/BN,KAAKsB,SAASb,KAAK,IAAIH,EAAQ,cAEjCiB,UACE,OAA+B,GAAxBvB,KAAKsB,SAASE,OAEvBC,cACE,OAAOzB,KAAKsB,SAEdI,WAAWhB,GACT,OAAOV,KAAKsB,SAASK,MAAMC,GAAYA,EAAQ3B,WAAaS,IAG9DmB,YAAYP,GACVtB,KAAKsB,SAAWA,EAGlBQ,WAAWF,GACJ5B,KAAKkB,IAAIU,EAAQ3B,YAAYD,KAAKsB,SAASb,KAAKmB,GAEvDG,cAAcxB,GACZP,KAAKsB,SAAWtB,KAAKsB,SAASL,QAC3BW,KAAcA,EAAQ3B,YAAcM,KAGzCW,IAAIX,GACF,OAAOP,KAAKsB,SAASH,MAAMC,GAASA,EAAKnB,YAAcM,KC3B3D,ICAIyB,EDAAC,EAAqB,QAqEzB,SAASC,EAAmBF,GAC1B,MAAMG,EAAcC,SAASC,cAAc,aAC3CF,EAAYG,UAAY,GACxBN,EAASP,cAAcc,SAASC,IAC9B,MAAMC,EAAaL,SAASM,cAAc,OACpCC,EAAcP,SAASM,cAAc,KAC3CD,EAAWG,GAAKJ,EAAQvC,UAAY,MACpC0C,EAAYC,GAAKJ,EAAQvC,UACzB0C,EAAYE,YAAcL,EAAQvC,UAClCwC,EAAWK,YAAYH,GACvBF,EAAWM,UAAY,cACvBZ,EAAYW,YAAYL,GAExBE,EAAYK,iBAAiB,SAAS,KACpCf,EAAqBO,EAAQvC,UAC7BgD,EAAmBjB,MAGrBS,EAAWS,MAAMC,QAAU,OAC3BV,EAAWS,MAAME,eAAiB,eAClCX,EAAWS,MAAMG,WAAa,SAE9B,MAAMC,EAASlB,SAASM,cAAc,UACtCY,EAAOV,GAAKJ,EAAQvC,UAAY,SAChCqD,EAAOT,YAAc,IACrBS,EAAOP,UAAY,aACnBO,EAAON,iBAAiB,SAAS,KAC/BhB,EAASD,cAAcS,EAAQvC,WAC/BsD,EAAUvB,GACVE,EAAmBF,GACdA,EAASd,IAAIe,KACZD,EAAST,UACXa,SAASC,cAAc,UAAUC,UAAY,IAE7CL,EAAqBD,EAASP,cAAc,GAAGxB,UAC/CgD,EAAmBjB,QAIzBS,EAAWK,YAAYQ,MAG3B,SAASE,IACPpB,SAASC,cAAc,kBAAkBa,MAAMC,QAAU,QACzDf,SAASC,cAAc,sBAAsBa,MAAMC,QAAU,OAG/D,SAASF,EAAmBjB,GAE1B,MAAMyB,EAAiBC,EAAmB1B,GAC1C,IAAKyB,EACH,OAEF,MAAME,EAAWvB,SAASC,cAAc,UACxCsB,EAASrB,UAAY,GACrBmB,EAAe9C,WAAW4B,SAASzB,IACjC,MAAM8C,EAAUxB,SAASM,cAAc,OACjCmB,EAAWzB,SAASM,cAAc,KACxCkB,EAAQhB,GAAK9B,EAAKb,UAAU6D,MAAM,EAAG,GAAK,MAC1CD,EAASjB,GAAK9B,EAAKb,UAAU6D,MAAM,EAAG,GACtCD,EAAShB,YAAc/B,EAAKb,UAC5B2D,EAAQd,YAAYe,GACpBD,EAAQb,UAAY,WAEpBa,EAAQV,MAAMC,QAAU,OACxBS,EAAQV,MAAMa,IAAM,KACpBH,EAAQV,MAAMG,WAAa,SAE3B,MAAMW,EAAQ5B,SAASM,cAAc,KACrCsB,EAAMpB,GAAK9B,EAAKb,UAAU6D,MAAM,EAAG,GAAK,IACxCE,EAAMnB,YAAc/B,EAAKX,UACzByD,EAAQd,YAAYkB,GAEpB,MAAMV,EAASlB,SAASM,cAAc,UACtCY,EAAOV,GAAK9B,EAAKb,UAAU6D,MAAM,EAAG,GAAK,SACzCR,EAAOT,YAAc,IACrBS,EAAOP,UAAY,aACnBO,EAAON,iBAAiB,SAAS,KAC/BS,EAAe1C,WAAWD,EAAKb,WAC/BsD,EAAUvB,GACViB,EAAmBjB,MAErB4B,EAAQd,YAAYQ,GACpBK,EAASb,YAAYc,MAIzB,SAASK,IACP7B,SAASC,cAAc,eAAea,MAAMC,QAAU,QACtDf,SAASC,cAAc,mBAAmBa,MAAMC,QAAU,OAG5D,SAASO,EAAmB1B,GAC1B,OAAIA,EAAST,WAGNS,EAASN,WAAWO,GAG7B,SAASsB,EAAUvB,GACjBkC,aAAaC,QAAQ,WAAYC,KAAKC,UAAUrC,ICvK7CkC,aAAaI,QAAQ,aAGxBtC,EAAWuC,OAAOC,OAChB,IAAInD,EACJ+C,KAAKK,MAAMP,aAAaI,QAAQ,cAElCtC,EAASH,YACPG,EAASP,cAAciD,KAAK9C,GACnB2C,OAAOC,OAAO,IAAIlE,EAAWsB,MAGxCI,EAASP,cAAcc,SAASX,IAC9BA,EAAQhB,SACNgB,EAAQjB,WAAW+D,KAAK5D,GACfyD,OAAOC,OAAO,IAAI5E,EAAQkB,UAdvCkB,EAAW,IAAIX,EDDF,SAAqBW,GAElCwB,IACAtB,EAAmBF,GAEnBiC,IACAhB,EAAmBjB,GAGnBI,SAASC,cAAc,qBAAqBW,iBAAiB,SAAS,KACpEQ,OAGFpB,SAASC,cAAc,kBAAkBW,iBAAiB,SAAS,KACjEiB,OAIF7B,SAASC,cAAc,kBAAkBW,iBAAiB,SAAS,KACjE2B,cAAczB,MAAMC,QAAU,OAC9Bf,SAASC,cAAc,sBAAsBa,MAAMC,QAAU,WAI/Df,SAASC,cAAc,eAAeW,iBAAiB,SAAS,KAC1DhB,EAAST,UACXqD,MAAM,2BAGRC,WAAW3B,MAAMC,QAAU,OAC3Bf,SAASC,cAAc,mBAAmBa,MAAMC,QAAU,YAG5Df,SACGC,cAAc,wBACdW,iBAAiB,SAAS,KACzB,MAAMtC,EAAO0B,SAASC,cAAc,wBAAwByC,MACxD9C,EAASd,IAAIR,GACfkE,MAAM,0BACY,KAATlE,EACTkE,MAAM,wBAENpB,IACAxB,EAASF,WAAW,IAAIxB,EAAQI,IAChCwB,EAAmBF,GACnBC,EAAqBvB,EACrBuC,EAAmBjB,GACnBuB,EAAUvB,OAIhBI,SAASC,cAAc,qBAAqBW,iBAAiB,SAAS,KACpE,MAAMtC,EAAO0B,SAASC,cAAc,qBAAqByC,MACnDzE,EAAO+B,SAASC,cAAc,oBAAoByC,MACpDpB,EAAmB1B,GAAUd,IAAIR,GACnCkE,MAAM,uBACY,KAATlE,EACTkE,MAAM,wBAENX,IACAP,EAAmB1B,GAAUnB,QAAQ,IAAIjB,EAAKc,EAAML,IACpD4C,EAAmBjB,GACnBuB,EAAUvB,OCzChB,CAAQA,I","sources":["webpack://todolist/./src/assets/Task.js","webpack://todolist/./src/assets/Project.js","webpack://todolist/./src/assets/Todolist.js","webpack://todolist/./src/assets/UI.js","webpack://todolist/./src/index.js"],"sourcesContent":["export default class Task {\n  constructor(taskName, dueDate = \"No date\") {\n    this.taskName = taskName;\n    this.dueDate = dueDate;\n  }\n  getName() {\n    return this.taskName;\n  }\n  setName(taskName) {\n    this.taskName = taskName;\n  }\n  getDate() {\n    return !this.dueDate ? \"No date\" : this.dueDate;\n  }\n  setDate(date) {\n    this.dueDate = date;\n  }\n}\n","import Task from \"./Task\";\n\nexport default class Project {\n  constructor(projectName) {\n    this.tasks = [];\n    this.projectName = projectName;\n    this.tasks.push(new Task(\"Some Task in \" + projectName));\n  }\n\n  getName() {\n    return this.projectName;\n  }\n\n  setName(name) {\n    this.projectName = name;\n  }\n  getTasks() {\n    return this.tasks;\n  }\n\n  setTasks(tasks) {\n    this.tasks = tasks;\n  }\n\n  addTask(task) {\n    this.tasks.push(task);\n  }\n  deleteTask(taskToBeDeleted) {\n    this.tasks = this.tasks.filter(\n      (task) => !(task.getName() == taskToBeDeleted)\n    );\n  }\n  has(taskName) {\n    return this.tasks.some((item) => item.getName() == taskName);\n  }\n}\n","import Project from \"./Project\";\n\nexport default class TodoList {\n  constructor() {\n    this.projects = [];\n    this.projects.push(new Project(\"Today\"));\n    this.projects.push(new Project(\"This Week\"));\n  }\n  isEmpty() {\n    return this.projects.length == 0;\n  }\n  getProjects() {\n    return this.projects;\n  }\n  getProject(name) {\n    return this.projects.find((project) => project.getName() == name);\n  }\n\n  setprojects(projects) {\n    this.projects = projects;\n  }\n\n  addproject(project) {\n    if (!this.has(project.getName())) this.projects.push(project);\n  }\n  deleteproject(projectName) {\n    this.projects = this.projects.filter(\n      (project) => !(project.getName() === projectName)\n    );\n  }\n  has(projectName) {\n    return this.projects.some((item) => item.getName() === projectName);\n  }\n}\n","import Project from \"./Project\";\nimport Task from \"./Task\";\nimport TodoList from \"./Todolist\";\n\nlet currentProjectName = \"Today\";\n\nexport default function setupNavBar(todoList) {\n  //NavBar Projects menu\n  MakeaddProjectFormInvisible();\n  UpdateProjectNames(todoList);\n\n  MakeaddTaskFormInvisible();\n  UpdateProjectTasks(todoList);\n\n  //cancel new project\n  document.querySelector(\"#cancelNewProject\").addEventListener(\"click\", () => {\n    MakeaddProjectFormInvisible();\n  });\n  //cancel new task\n  document.querySelector(\"#cancelNewTask\").addEventListener(\"click\", () => {\n    MakeaddTaskFormInvisible();\n  });\n\n  //add project button ActionListener\n  document.querySelector(\"#addProjectBtn\").addEventListener(\"click\", () => {\n    addProjectBtn.style.display = \"none\";\n    document.querySelector(\"#addProjectFormDiv\").style.display = \"block\";\n  });\n\n  //add task button ActionListener\n  document.querySelector(\"#addTaskBtn\").addEventListener(\"click\", () => {\n    if (todoList.isEmpty()) {\n      alert(\"Make a project first!!\");\n      return;\n    }\n    addTaskBtn.style.display = \"none\";\n    document.querySelector(\"#addTaskFormDiv\").style.display = \"block\";\n  });\n  //addProjectform submit\n  document\n    .querySelector(\"#createNewProjectBtn\")\n    .addEventListener(\"click\", () => {\n      const name = document.querySelector(\"#addProjectNameInput\").value;\n      if (todoList.has(name)) {\n        alert(\"Project already exists\");\n      } else if (name === \"\") {\n        alert(\"Name can't be empty\");\n      } else {\n        MakeaddProjectFormInvisible();\n        todoList.addproject(new Project(name));\n        UpdateProjectNames(todoList);\n        currentProjectName = name;\n        UpdateProjectTasks(todoList);\n        storeList(todoList);\n      }\n    });\n  //addTaskform submit\n  document.querySelector(\"#createNewTaskBtn\").addEventListener(\"click\", () => {\n    const name = document.querySelector(\"#addTaskNameInput\").value;\n    const date = document.querySelector(\"#addDueDateInput\").value;\n    if (findCurrentProject(todoList).has(name)) {\n      alert(\"Task already exists\");\n    } else if (name === \"\") {\n      alert(\"Task can't be empty\");\n    } else {\n      MakeaddTaskFormInvisible();\n      findCurrentProject(todoList).addTask(new Task(name, date));\n      UpdateProjectTasks(todoList);\n      storeList(todoList);\n    }\n  });\n}\n\nfunction UpdateProjectNames(todoList) {\n  const projectsDiv = document.querySelector(\"#projects\");\n  projectsDiv.innerHTML = \"\";\n  todoList.getProjects().forEach((element) => {\n    const projectDiv = document.createElement(\"div\");\n    const projectText = document.createElement(\"p\");\n    projectDiv.id = element.getName() + \"div\";\n    projectText.id = element.getName();\n    projectText.textContent = element.getName();\n    projectDiv.appendChild(projectText);\n    projectDiv.classList = \"projectList\";\n    projectsDiv.appendChild(projectDiv);\n    //changing projects\n    projectText.addEventListener(\"click\", () => {\n      currentProjectName = element.getName();\n      UpdateProjectTasks(todoList);\n    });\n    //styling the new project\n    projectDiv.style.display = \"flex\";\n    projectDiv.style.justifyContent = \"space-around\";\n    projectDiv.style.alignItems = \"center\";\n    //delete project btn\n    const delBtn = document.createElement(\"button\");\n    delBtn.id = element.getName() + \"DelBtn\";\n    delBtn.textContent = \"x\";\n    delBtn.classList = \"cancelBtns\";\n    delBtn.addEventListener(\"click\", () => {\n      todoList.deleteproject(element.getName());\n      storeList(todoList);\n      UpdateProjectNames(todoList);\n      if (!todoList.has(currentProjectName)) {\n        if (todoList.isEmpty()) {\n          document.querySelector(\"#tasks\").innerHTML = \"\";\n        } else {\n          currentProjectName = todoList.getProjects()[0].getName();\n          UpdateProjectTasks(todoList);\n        }\n      }\n    });\n    projectDiv.appendChild(delBtn);\n  });\n}\nfunction MakeaddProjectFormInvisible() {\n  document.querySelector(\"#addProjectBtn\").style.display = \"block\";\n  document.querySelector(\"#addProjectFormDiv\").style.display = \"none\";\n}\n\nfunction UpdateProjectTasks(todoList) {\n  //task text\n  const currentProject = findCurrentProject(todoList);\n  if (!currentProject) {\n    return;\n  }\n  const tasksDiv = document.querySelector(\"#tasks\");\n  tasksDiv.innerHTML = \"\";\n  currentProject.getTasks().forEach((task) => {\n    const taskDiv = document.createElement(\"div\");\n    const taskText = document.createElement(\"p\");\n    taskDiv.id = task.getName().slice(0, 4) + \"div\";\n    taskText.id = task.getName().slice(0, 4);\n    taskText.textContent = task.getName();\n    taskDiv.appendChild(taskText);\n    taskDiv.classList = \"taskList\";\n    //styling\n    taskDiv.style.display = \"flex\";\n    taskDiv.style.gap = \"5%\";\n    taskDiv.style.alignItems = \"center\";\n    //due date\n    const dateP = document.createElement(\"p\");\n    dateP.id = task.getName().slice(0, 4) + \"p\";\n    dateP.textContent = task.getDate();\n    taskDiv.appendChild(dateP);\n    //del button\n    const delBtn = document.createElement(\"button\");\n    delBtn.id = task.getName().slice(0, 4) + \"DelBtn\";\n    delBtn.textContent = \"x\";\n    delBtn.classList = \"cancelBtns\";\n    delBtn.addEventListener(\"click\", () => {\n      currentProject.deleteTask(task.getName());\n      storeList(todoList);\n      UpdateProjectTasks(todoList);\n    });\n    taskDiv.appendChild(delBtn);\n    tasksDiv.appendChild(taskDiv);\n  });\n}\n\nfunction MakeaddTaskFormInvisible() {\n  document.querySelector(\"#addTaskBtn\").style.display = \"block\";\n  document.querySelector(\"#addTaskFormDiv\").style.display = \"none\";\n}\n\nfunction findCurrentProject(todoList) {\n  if (todoList.isEmpty()) {\n    return false;\n  }\n  return todoList.getProject(currentProjectName);\n}\n\nfunction storeList(todoList) {\n  localStorage.setItem(\"todolist\", JSON.stringify(todoList));\n}\n","import Task from \"./assets/Task\";\nimport TodoList from \"./assets/Todolist\";\nimport Project from \"./assets/Project\";\nimport setupUI from \"./assets/UI\";\nlet todoList;\n\nif (!localStorage.getItem(\"todolist\")) {\n  todoList = new TodoList();\n} else {\n  todoList = Object.assign(\n    new TodoList(),\n    JSON.parse(localStorage.getItem(\"todolist\"))\n  );\n  todoList.setprojects(\n    todoList.getProjects().map((project) => {\n      return Object.assign(new Project(), project);\n    })\n  );\n  todoList.getProjects().forEach((project) => {\n    project.setTasks(\n      project.getTasks().map((task) => {\n        return Object.assign(new Task(), task);\n      })\n    );\n  });\n}\n\nsetupUI(todoList);\n"],"names":["Task","constructor","taskName","dueDate","this","getName","setName","getDate","setDate","date","Project","projectName","tasks","push","name","getTasks","setTasks","addTask","task","deleteTask","taskToBeDeleted","filter","has","some","item","TodoList","projects","isEmpty","length","getProjects","getProject","find","project","setprojects","addproject","deleteproject","todoList","currentProjectName","UpdateProjectNames","projectsDiv","document","querySelector","innerHTML","forEach","element","projectDiv","createElement","projectText","id","textContent","appendChild","classList","addEventListener","UpdateProjectTasks","style","display","justifyContent","alignItems","delBtn","storeList","MakeaddProjectFormInvisible","currentProject","findCurrentProject","tasksDiv","taskDiv","taskText","slice","gap","dateP","MakeaddTaskFormInvisible","localStorage","setItem","JSON","stringify","getItem","Object","assign","parse","map","addProjectBtn","alert","addTaskBtn","value"],"sourceRoot":""}