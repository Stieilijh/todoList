{"version":3,"file":"main.js","mappings":"mBAAe,MAAMA,EACnBC,YAAYC,GACVC,KAAKC,MAAQ,GACbD,KAAKD,YAAcA,EAGrBG,UACE,OAAOF,KAAKD,YAGdI,QAAQC,GACNJ,KAAKD,YAAcK,EAErBC,WACE,OAAOL,KAAKC,MAGdK,SAASL,GACPD,KAAKC,MAAQA,EAGfM,QAAQC,GACNR,KAAKC,MAAMQ,OAAOD,GAEpBE,YAAYC,GACVX,KAAKC,MAAMW,QAAQJ,KAAWA,EAAKN,WAAaS,EAAgBT,aAElEW,QAAQL,GACNR,KAAKC,MAAMa,MAAMC,GAASA,EAAKb,WAAaM,EAAKN,aCKrD,SAASc,EAAmBC,GAC1B,MAAMC,EAAcC,SAASC,cAAc,aAC3CF,EAAYG,UAAY,GACxBJ,EAASK,cAAcC,SAASC,IAC9B,MAAMC,EAAaN,SAASO,cAAc,OAC1CD,EAAWE,GAAKH,EAAQtB,UACxBuB,EAAWG,YAAcJ,EAAQtB,UACjCuB,EAAWI,UAAY,cACvBX,EAAYY,YAAYL,GAExBA,EAAWM,MAAMC,QAAU,OAC3BP,EAAWM,MAAME,eAAiB,eAClCR,EAAWM,MAAMG,WAAa,SAE9B,MAAMC,EAAShB,SAASO,cAAc,UACtCS,EAAOR,GAAKH,EAAQtB,UAAY,SAChCiC,EAAOP,YAAc,IACrBO,EAAON,UAAY,aACnBM,EAAOC,iBAAiB,SAAS,KAC/BnB,EAASoB,cAAcb,EAAQtB,WAC/Bc,EAAmBC,MAErBQ,EAAWK,YAAYK,MAG3B,SAASG,IACPnB,SAASC,cAAc,kBAAkBW,MAAMC,QAAU,QACzDb,SAASC,cAAc,sBAAsBW,MAAMC,QAAU,OA1DhD,IAAqBf,ICKnB,ICLF,MACbnB,cACEE,KAAKuC,SAAW,GAChBvC,KAAKuC,SAASC,KAAK,IAAI3C,EAAQ,UAC/BG,KAAKuC,SAASC,KAAK,IAAI3C,EAAQ,cAEjCyB,cACE,OAAOtB,KAAKuC,SAGdE,YAAYF,GACVvC,KAAKuC,SAAWA,EAGlBG,WAAWC,GACJ3C,KAAK4C,IAAID,EAAQzC,YAAYF,KAAKuC,SAASC,KAAKG,GAEvDN,cAActC,GACZC,KAAKuC,SAAWvC,KAAKuC,SAAS3B,QAC3B+B,KAAcA,EAAQzC,YAAcH,KAGzC6C,IAAI7C,GACF,OAAOC,KAAKuC,SAASzB,MAAMC,GAASA,EAAKb,YAAcH,MFtBzDuC,IACAtB,EAAmBC,GAGnBE,SAASC,cAAc,qBAAqBgB,iBAAiB,SAAS,KACpEE,OAIFnB,SAASC,cAAc,kBAAkBgB,iBAAiB,SAAS,KACjES,cAAcd,MAAMC,QAAU,OAC9Bb,SAASC,cAAc,sBAAsBW,MAAMC,QAAU,WAG/Db,SACGC,cAAc,wBACdgB,iBAAiB,SAAS,KACzB,MAAMhC,EAAOe,SAASC,cAAc,wBAAwB0B,MACxD7B,EAAS2B,IAAIxC,GACf2C,MAAM,0BACY,KAAT3C,EACT2C,MAAM,wBAENT,IACArB,EAASyB,WAAW,IAAI7C,EAAQO,IAChCY,EAAmBC,Q","sources":["webpack://todolist/./src/assets/Project.js","webpack://todolist/./src/assets/navbarUI.js","webpack://todolist/./src/index.js","webpack://todolist/./src/assets/Todolist.js"],"sourcesContent":["export default class Project {\n  constructor(projectName) {\n    this.tasks = [];\n    this.projectName = projectName;\n  }\n\n  getName() {\n    return this.projectName;\n  }\n\n  setName(name) {\n    this.projectName = name;\n  }\n  getTasks() {\n    return this.tasks;\n  }\n\n  setTasks(tasks) {\n    this.tasks = tasks;\n  }\n\n  addTask(task) {\n    this.tasks.append(task);\n  }\n  deleteTasks(taskToBeDeleted) {\n    this.tasks.filter((task) => !(task.getName() == taskToBeDeleted.getName()));\n  }\n  isThere(task) {\n    this.tasks.some((item) => item.getName() == task.getName());\n  }\n}\n","import Project from \"./Project\";\n\nexport default function setupNavBar(todoList) {\n  MakeaddProjectFormInvisible();\n  UpdateProjectNames(todoList);\n\n  //cancel new project\n  document.querySelector(\"#cancelNewProject\").addEventListener(\"click\", () => {\n    MakeaddProjectFormInvisible();\n  });\n\n  //add project button ActionListener\n  document.querySelector(\"#addProjectBtn\").addEventListener(\"click\", () => {\n    addProjectBtn.style.display = \"none\";\n    document.querySelector(\"#addProjectFormDiv\").style.display = \"block\";\n  });\n  //addProjectform submit\n  document\n    .querySelector(\"#createNewProjectBtn\")\n    .addEventListener(\"click\", () => {\n      const name = document.querySelector(\"#addProjectNameInput\").value;\n      if (todoList.has(name)) {\n        alert(\"Project already exists\");\n      } else if (name === \"\") {\n        alert(\"Name can't be empty\");\n      } else {\n        MakeaddProjectFormInvisible();\n        todoList.addproject(new Project(name));\n        UpdateProjectNames(todoList);\n      }\n    });\n}\n\nfunction UpdateProjectNames(todoList) {\n  const projectsDiv = document.querySelector(\"#projects\");\n  projectsDiv.innerHTML = \"\";\n  todoList.getprojects().forEach((element) => {\n    const projectDiv = document.createElement(\"div\");\n    projectDiv.id = element.getName();\n    projectDiv.textContent = element.getName();\n    projectDiv.classList = \"projectList\";\n    projectsDiv.appendChild(projectDiv);\n    //styling the new project\n    projectDiv.style.display = \"flex\";\n    projectDiv.style.justifyContent = \"space-around\";\n    projectDiv.style.alignItems = \"center\";\n    //delete project btn\n    const delBtn = document.createElement(\"button\");\n    delBtn.id = element.getName() + \"DelBtn\";\n    delBtn.textContent = \"x\";\n    delBtn.classList = \"cancelBtns\";\n    delBtn.addEventListener(\"click\", () => {\n      todoList.deleteproject(element.getName());\n      UpdateProjectNames(todoList);\n    });\n    projectDiv.appendChild(delBtn);\n  });\n}\nfunction MakeaddProjectFormInvisible() {\n  document.querySelector(\"#addProjectBtn\").style.display = \"block\";\n  document.querySelector(\"#addProjectFormDiv\").style.display = \"none\";\n}\n","import Task from \"./assets/Task\";\nimport TodoList from \"./assets/Todolist\";\nimport Project from \"./assets/Project\";\nimport setupNavBar from \"./assets/navbarUI\";\n\n//const TodoListDiv = document.querySelector(\"#todolist\");\n\nconst todoList = new TodoList();\n\nsetupNavBar(todoList);\n","import Project from \"./Project\";\n\nexport default class TodoList {\n  constructor() {\n    this.projects = [];\n    this.projects.push(new Project(\"Today\"));\n    this.projects.push(new Project(\"This Week\"));\n  }\n  getprojects() {\n    return this.projects;\n  }\n\n  setprojects(projects) {\n    this.projects = projects;\n  }\n\n  addproject(project) {\n    if (!this.has(project.getName())) this.projects.push(project);\n  }\n  deleteproject(projectName) {\n    this.projects = this.projects.filter(\n      (project) => !(project.getName() === projectName)\n    );\n  }\n  has(projectName) {\n    return this.projects.some((item) => item.getName() === projectName);\n  }\n}\n"],"names":["Project","constructor","projectName","this","tasks","getName","setName","name","getTasks","setTasks","addTask","task","append","deleteTasks","taskToBeDeleted","filter","isThere","some","item","UpdateProjectNames","todoList","projectsDiv","document","querySelector","innerHTML","getprojects","forEach","element","projectDiv","createElement","id","textContent","classList","appendChild","style","display","justifyContent","alignItems","delBtn","addEventListener","deleteproject","MakeaddProjectFormInvisible","projects","push","setprojects","addproject","project","has","addProjectBtn","value","alert"],"sourceRoot":""}