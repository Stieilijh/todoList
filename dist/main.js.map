{"version":3,"file":"main.js","mappings":"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","sources":["webpack://todolist/./src/assets/Task.js","webpack://todolist/./src/assets/Project.js","webpack://todolist/./src/assets/Todolist.js","webpack://todolist/./src/assets/UI.js","webpack://todolist/./src/index.js"],"sourcesContent":["export default class Task {\n  constructor(taskName, dueDate = new Date(), priority = 1) {\n    this.taskName = taskName;\n    this.dueDate = dueDate;\n    this.priority = priority;\n  }\n  getName() {\n    return this.taskName;\n  }\n  setName(taskName) {\n    this.taskName = taskName;\n  }\n  setPriority(priority) {\n    this.priority = priority;\n  }\n  getPriority() {\n    return this.priority;\n  }\n  getDate() {\n    return !this.dueDate ? new Date() : this.dueDate;\n  }\n  setDate(date) {\n    this.dueDate = date;\n  }\n  getFormattedDate() {\n    return new Date(this.getDate()).toLocaleDateString(\"en-UK\", {\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n      weekday: \"short\",\n    });\n  }\n  getBackgroundColor(priority) {\n    switch (priority) {\n      case 1:\n        return \"#00ff00\";\n      case 2:\n        return \"#ffa500\";\n      case 3:\n        return \"#ff0000\";\n      default:\n        console.log(\"sucka\");\n    }\n  }\n}\n","import Task from \"./Task\";\n\nexport default class Project {\n  constructor(projectName) {\n    this.tasks = [];\n    this.projectName = projectName;\n    this.tasks.push(new Task(\"Some Task in \" + projectName));\n  }\n\n  getName() {\n    return this.projectName;\n  }\n\n  setName(name) {\n    this.projectName = name;\n  }\n  getTasks() {\n    return this.tasks;\n  }\n\n  setTasks(tasks) {\n    this.tasks = tasks;\n  }\n\n  addTask(task) {\n    if (!this.has(task.getName())) {\n      this.tasks.push(task);\n    }\n  }\n  deleteTask(taskToBeDeleted) {\n    this.tasks = this.tasks.filter(\n      (task) => !(task.getName() == taskToBeDeleted)\n    );\n  }\n  has(taskName) {\n    return this.tasks.some((item) => item.getName() == taskName);\n  }\n}\n","import Project from \"./Project\";\n\nexport default class TodoList {\n  constructor() {\n    this.projects = [];\n    this.projects.push(new Project(\"Today\"));\n    this.projects.push(new Project(\"This Week\"));\n  }\n  isEmpty() {\n    return this.projects.length == 0;\n  }\n  getProjects() {\n    return this.projects;\n  }\n  getProject(name) {\n    return this.projects.find((project) => project.getName() == name);\n  }\n\n  setprojects(projects) {\n    this.projects = projects;\n  }\n\n  addproject(project) {\n    if (!this.has(project.getName())) this.projects.push(project);\n  }\n  deleteproject(projectName) {\n    this.projects = this.projects.filter(\n      (project) => !(project.getName() === projectName)\n    );\n  }\n  has(projectName) {\n    return this.projects.some((item) => item.getName() === projectName);\n  }\n}\n","import Project from \"./Project\";\nimport Task from \"./Task\";\nimport TodoList from \"./Todolist\";\n\nlet currentProjectName = \"Today\";\n\nexport default function setupNavBar(todoList) {\n  //NavBar Projects menu\n  MakeaddProjectFormInvisible();\n  UpdateProjectNames(todoList);\n\n  MakeaddTaskFormInvisible();\n  UpdateProjectTasks(todoList);\n\n  //cancel new project\n  document.querySelector(\"#cancelNewProject\").addEventListener(\"click\", () => {\n    MakeaddProjectFormInvisible();\n  });\n  //cancel new task\n  document.querySelector(\"#cancelNewTask\").addEventListener(\"click\", () => {\n    MakeaddTaskFormInvisible();\n  });\n\n  //add project button ActionListener\n  document.querySelector(\"#addProjectBtn\").addEventListener(\"click\", () => {\n    addProjectBtn.style.display = \"none\";\n    document.querySelector(\"#addProjectFormDiv\").style.display = \"block\";\n  });\n\n  //add task button ActionListener\n  document.querySelector(\"#addTaskBtn\").addEventListener(\"click\", () => {\n    if (todoList.isEmpty()) {\n      alert(\"Make a project first!!\");\n      return;\n    }\n    addTaskBtn.style.display = \"none\";\n    document.querySelector(\"#addTaskFormDiv\").style.display = \"block\";\n  });\n  //addProjectform submit\n  document\n    .querySelector(\"#createNewProjectBtn\")\n    .addEventListener(\"click\", () => {\n      const name = document.querySelector(\"#addProjectNameInput\").value;\n      if (todoList.has(name)) {\n        alert(\"Project already exists\");\n      } else if (name === \"\") {\n        alert(\"Name can't be empty\");\n      } else {\n        MakeaddProjectFormInvisible();\n        todoList.addproject(new Project(name));\n        UpdateProjectNames(todoList);\n        currentProjectName = name;\n        UpdateProjectTasks(todoList);\n        storeList(todoList);\n      }\n    });\n  //addTaskform submit\n  document.querySelector(\"#createNewTaskBtn\").addEventListener(\"click\", () => {\n    const name = document.querySelector(\"#addTaskNameInput\").value;\n    const date = document.querySelector(\"#addDueDateInput\").value;\n    const priority = document.querySelector(\"#addPriorityInput\").value;\n    if (findCurrentProject(todoList).has(name)) {\n      alert(\"Task already exists\");\n    } else if (name === \"\") {\n      alert(\"Task can't be empty\");\n    } else {\n      MakeaddTaskFormInvisible();\n      findCurrentProject(todoList).addTask(\n        new Task(name, date, parseInt(priority))\n      );\n      UpdateProjectTasks(todoList);\n      storeList(todoList);\n      initializeMainProjects(todoList);\n    }\n  });\n}\n\nfunction UpdateProjectNames(todoList) {\n  const projectsDiv = document.querySelector(\"#projects\");\n  projectsDiv.innerHTML = \"\";\n  todoList.getProjects().forEach((project) => {\n    const projectDiv = document.createElement(\"div\");\n    const projectText = document.createElement(\"p\");\n    projectDiv.id = project.getName() + \"div\";\n    projectText.id = project.getName();\n    projectText.textContent = project.getName();\n    projectDiv.appendChild(projectText);\n    projectDiv.classList = \"projectList\";\n    projectsDiv.appendChild(projectDiv);\n    //changing projects\n    projectText.addEventListener(\"click\", () => {\n      currentProjectName = project.getName();\n      UpdateProjectTasks(todoList);\n    });\n    //styling the new project\n    projectDiv.style.display = \"flex\";\n    projectDiv.style.justifyContent = \"space-around\";\n    projectDiv.style.alignItems = \"center\";\n    //delete project btn\n    if (!(project.getName() == \"Today\" || project.getName() == \"This Week\")) {\n      const delBtn = document.createElement(\"button\");\n      delBtn.id = project.getName() + \"DelBtn\";\n      delBtn.textContent = \"x\";\n      delBtn.classList = \"cancelBtns\";\n      delBtn.addEventListener(\"click\", () => {\n        todoList.deleteproject(project.getName());\n        storeList(todoList);\n        UpdateProjectNames(todoList);\n        initializeMainProjects(todoList);\n        if (!todoList.has(currentProjectName)) {\n          if (todoList.isEmpty()) {\n            document.querySelector(\"#tasks\").innerHTML = \"\";\n          } else {\n            currentProjectName = todoList.getProjects()[0].getName();\n            UpdateProjectTasks(todoList);\n          }\n        }\n      });\n      projectDiv.appendChild(delBtn);\n    }\n    //adds tasks from all other projects to today and this week\n    initializeMainProjects(todoList);\n  });\n}\nfunction MakeaddProjectFormInvisible() {\n  document.querySelector(\"#addProjectBtn\").style.display = \"block\";\n  document.querySelector(\"#addProjectFormDiv\").style.display = \"none\";\n}\n\nfunction UpdateProjectTasks(todoList) {\n  //task text\n  const currentProject = findCurrentProject(todoList);\n  if (!currentProject) {\n    return;\n  }\n  const tasksDiv = document.querySelector(\"#tasks\");\n  tasksDiv.innerHTML = \"\";\n  currentProject.getTasks().forEach((task) => {\n    const taskDiv = document.createElement(\"div\");\n    const taskText = document.createElement(\"p\");\n    taskDiv.id = task.getName().slice(0, 4) + \"div\";\n    taskText.id = task.getName().slice(0, 4);\n    taskText.textContent = task.getName();\n    taskDiv.appendChild(taskText);\n    taskDiv.classList = \"taskList\";\n    //styling\n    taskDiv.style.display = \"flex\";\n    taskDiv.style.backgroundColor = task.getBackgroundColor(task.getPriority());\n    taskDiv.style.gap = \"5%\";\n    taskDiv.style.alignItems = \"center\";\n    //due date\n    const dateP = document.createElement(\"p\");\n    dateP.id = task.getName().slice(0, 4) + \"date\";\n    dateP.textContent = task.getFormattedDate();\n    taskDiv.appendChild(dateP);\n    //task priority\n    const priority = document.createElement(\"p\");\n    priority.id = task.getName().slice(0, 4) + \"priority\";\n    priority.textContent = task.getPriority();\n    taskDiv.appendChild(priority);\n    //del button\n    const delBtn = document.createElement(\"button\");\n    delBtn.id = task.getName().slice(0, 4) + \"DelBtn\";\n    delBtn.textContent = \"x\";\n    delBtn.classList = \"cancelBtns\";\n    delBtn.addEventListener(\"click\", () => {\n      currentProject.deleteTask(task.getName());\n      storeList(todoList);\n      UpdateProjectTasks(todoList);\n    });\n    taskDiv.appendChild(delBtn);\n    tasksDiv.appendChild(taskDiv);\n  });\n}\n\nfunction MakeaddTaskFormInvisible() {\n  document.querySelector(\"#addTaskBtn\").style.display = \"block\";\n  document.querySelector(\"#addTaskFormDiv\").style.display = \"none\";\n}\n\nfunction findCurrentProject(todoList) {\n  if (todoList.isEmpty()) {\n    return false;\n  }\n  return todoList.getProject(currentProjectName);\n}\n\nfunction storeList(todoList) {\n  localStorage.setItem(\"todolist\", JSON.stringify(todoList));\n}\n\n//adds tasks from all other projects to today and this week\nfunction initializeMainProjects(todoList) {\n  todoList.getProjects().forEach((project) => {\n    if (!(project.getName() == \"Today\" || project.getName() == \"This Week\")) {\n      project.getTasks().forEach((task) => {\n        if (\n          isToday(task.getDate()) &&\n          !todoList.getProject(\"Today\").has(task.getName())\n        ) {\n          todoList.getProject(\"Today\").addTask(task);\n        }\n      });\n    }\n  });\n}\n\nconst isToday = (someDate) => {\n  const today = new Date();\n  someDate = new Date(someDate);\n  return (\n    someDate.getDate() == today.getDate() &&\n    someDate.getMonth() == today.getMonth() &&\n    someDate.getFullYear() == today.getFullYear()\n  );\n};\n","import Task from \"./assets/Task\";\nimport TodoList from \"./assets/Todolist\";\nimport Project from \"./assets/Project\";\nimport setupUI from \"./assets/UI\";\nlet todoList;\nlocalStorage.clear();\nif (!localStorage.getItem(\"todolist\")) {\n  todoList = new TodoList();\n} else {\n  todoList = Object.assign(\n    new TodoList(),\n    JSON.parse(localStorage.getItem(\"todolist\"))\n  );\n  todoList.setprojects(\n    todoList.getProjects().map((project) => {\n      return Object.assign(new Project(), project);\n    })\n  );\n  todoList.getProjects().forEach((project) => {\n    project.setTasks(\n      project.getTasks().map((task) => {\n        return Object.assign(new Task(), task);\n      })\n    );\n  });\n}\n\nsetupUI(todoList);\n"],"names":["Task","constructor","taskName","dueDate","Date","priority","this","getName","setName","setPriority","getPriority","getDate","setDate","date","getFormattedDate","toLocaleDateString","year","month","day","weekday","getBackgroundColor","console","log","Project","projectName","tasks","push","name","getTasks","setTasks","addTask","task","has","deleteTask","taskToBeDeleted","filter","some","item","TodoList","projects","isEmpty","length","getProjects","getProject","find","project","setprojects","addproject","deleteproject","currentProjectName","UpdateProjectNames","todoList","projectsDiv","document","querySelector","innerHTML","forEach","projectDiv","createElement","projectText","id","textContent","appendChild","classList","addEventListener","UpdateProjectTasks","style","display","justifyContent","alignItems","delBtn","storeList","initializeMainProjects","MakeaddProjectFormInvisible","currentProject","findCurrentProject","tasksDiv","taskDiv","taskText","slice","backgroundColor","gap","dateP","MakeaddTaskFormInvisible","localStorage","setItem","JSON","stringify","isToday","someDate","today","getMonth","getFullYear","clear","getItem","Object","assign","parse","map","addProjectBtn","alert","addTaskBtn","value","parseInt"],"sourceRoot":""}